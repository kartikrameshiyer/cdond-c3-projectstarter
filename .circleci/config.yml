version: 2.1

defaults: &defaults
  docker:
    - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name prod-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name prod-frontend-${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Deleting the S3 bucket and files
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
  amazonservices:
    description: installing aws cli
    parameters:
      # Add parameter here
    steps:
      - run:
          name: installation of pip and aws cli
          # Add when this will run
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
            awscli \
            && rm -rf /var/cache/apk/*

jobs:
  build-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i 
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i 
            npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: running unit test
          command: |
            cd frontend
            npm i 
            npm install jest 
            npm run test

      # Checkout code from git
      # Restore from cache
      # Your job code here
  test-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: running unit test
          command: |
            cd backend
            npm install jest-junit
            npm run test
  scan-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: auditing the packages
          command: |
            cd frontend
            npm audit --audit-level=critical
        # Checkout code from git
        # Restore from cache
        # Your job code here
  scan-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: auditing the packages
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
        # Checkout code from git
        # Restore from cache
        # Your job code here
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: installing required software
          command: |
            yum install tar -y
            yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name prod-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "prod-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run: echo \[web\] > ./.circleci/ansible/inventory
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> ./.circleci/ansible/inventory

            cat ./.circleci/ansible/inventory

      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory
      - run: pwd
      - run: cat ~/project/.circleci/ansible/inventory
      - destroy-environment
      # Here's where you will add some code to rollback on failure
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
        # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "be:7c:52:8a:37:2c:d0:f5:3a:38:ca:ce:16:59:02:d4"
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - amazonservices
      - run: cat .circleci/ansible/inventory
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |

            ansible-playbook -i .circleci/ansible/inventory .circleci/ansible/configure-server.yml
      - destroy-environment
  run-migrations:
    docker:
      - image: circleci/node:latest
      # Docker image here that supports NodeJS
    steps:
      - checkout
      - run: cd backend && npm install
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            touch dbmigrationresults
            cd backend 
            npm run migrations > dbmigrationresults
      - run: cat dbmigrationresults
      - run:
          name: results values
          command: |
            if grep "successfully" dbmigrationresults.txt
            then 
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "true" https://api.memstash.io/values/<< pipeline.id >>_migrations
            else
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "false" https://api.memstash.io/values/<< pipeline.id >>_migrations
            fi
      - destroy-environment
      # - run:
      #     name: Send migration results to memstash
      #     command: |
      #       if grep
      #       exit 1
    # Here's where you will add some code to rollback on failure
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar -y
            yum install gzip -y
            yum install python3-pip -y
            yum -y install curl -y
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            echo BACKEND_IP
            cd frontend
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            npm install 
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      # Here's where you will add some code to rollback on failure
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "be:7c:52:8a:37:2c:d0:f5:3a:38:ca:ce:16:59:02:d4"
      - attach_workspace:
          at: .circleci/ansible/
      - store_artifacts: # See circleci.com/docs/2.0/artifacts/ for more details.
          path: .circleci/ansible/inventory
          destination: artifact-file
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: installing shell
          command: |
            apk add openssh-client

      - run:
          name: installing aws-cli
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
            awscli \
            && rm -rf /var/cache/apk/*
      - run: cat .circleci/ansible/inventory
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            cat .circleci/ansible/inventory
            printenv >> ./backend/.env
            cat ./backend/.env
            ansible-playbook -i .circleci/ansible/inventory .circleci/ansible/deploy-backend.yml

      #- destroy-environment
      # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      #********** testing Jobs******
      - deploy-infrastructure
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # ******** Testing End**********
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires:
      #       [test-frontend, test-backend, scan-frontend, scan-backend]
      #only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
